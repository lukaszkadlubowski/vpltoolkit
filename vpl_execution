#!/usr/bin/env bash
# rm -f $0

if [ -f ./env.sh ] ; then
    source ./env.sh
    elif [ -f $HOME/env.sh ] ; then
    source $HOME/env.sh
else
    echo "⚠ File \"env.sh\" is missing!" && exit 0
fi

[ -z "$MODE" ] && echo "⚠ Variable \"MODE\" is not defined!" && exit 0
grep -w $MODE <<< "RUN DEBUG EVAL" &> /dev/null
[ $? -ne 0 ] && echo "⚠ Invalid MODE \"$MODE\"!" && exit 0
[ -z "$RUNDIR" ] && echo "⚠ Variable \"RUNDIR\" is not defined!" && exit 0
[ -z "$ENTRYPOINT" ] && echo "⚠ Variable \"ENTRYPOINT\" is not defined!" && exit 0
CMD="$RUNDIR/$ENTRYPOINT"
[ ! -f "$CMD" ] && echo "⚠ Entrypoint file \"$CMD\" not found!" && exit 0
### shell command
SHELLCMD="bash"
# [ "$DEBUG" = "1" ] && SHELLCMD="bash -x"
# [ $GRAPHIC -eq 1 ] && SHELLCMD="xterm -hold -e $SHELLCMD"

function dockerclean()
{
    # ( docker container stop -t 1 $DOCKERID &> /dev/null )
    ( docker container rm -f $DOCKERID &> /dev/null )
    echo "Docker $DOCKER terminated."
    # docker container prune -f
    # docker system df
}

cd $RUNDIR
# echo "RUNDIR=$RUNDIR"

### graphic mode ###
if [ $GRAPHIC -eq 1 ] ; then
    xhost +                     # FIXME: try to be no so permissive!
    # export VNCPORT=${DISPLAY:1} # remove ':' from $DISPLAY
fi

### docker run ###
if [ -n "$DOCKER" ] ; then
    trap 'dockerclean' EXIT
    [ -z "$DOCKERTIMEOUT" ] && echo "⚠ Variable \"DOCKERTIMEOUT\" is not defined!" && exit 0
    # check if docker image is already installed
    docker image inspect $DOCKER &> output
    [ $? -ne 0 ] && echo "⚠ Docker image \"$DOCKER\" is required, but not locally installed!" && cat output && exit 0
    # DOCKEROPT="--privileged"
    # DOCKEROPT="$DOCKEROPT -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix"
    XDISPLAY=$(sed -e 's/.*:\(.*\)/\1/' <<< $DISPLAY)
    XSOCK="/tmp/.X11-unix/X$XDISPLAY"
    [ ! -S /tmp/.X11-unix/X$XDISPLAY ] && echo "⚠ X11 socket \"$XSOCK\" not found!" && exit 0
    # [ $GRAPHIC -eq 1 ] && echo "DISPLAY=$DISPLAY"
    # [ $GRAPHIC -eq 1 ] && echo "XSOCK=$XSOCK"
    DOCKEROPT="$DOCKEROPT -e DISPLAY=$DISPLAY -v $XSOCK:$XSOCK"
    # DOCKEROPT="$DOCKEROPT --device=/dev/dri:/dev/dri" # direct rendering
    if [ -S /var/run/docker.sock ] ; then
        DOCKEROPT="$DOCKEROPT -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker"
    else
        echo "⚠ Warning: /var/run/docker.sock not found!"
    fi
    if [ -e /dev/kvm ] ; then
        DOCKEROPT="$DOCKEROPT --device=/dev/kvm:/dev/kvm"
    else
        echo "⚠ Warning: /dev/kvm not found!"
    fi
    # DOCKEROPT="$DOCKEROPT -v /dev/kvm:/dev/kvm" # failure on moodle, ok at home!?
    # DOCKEROPT="$DOCKEROPT -v /root/stockage:/root/stockage"
    # DOCKEROPT="$DOCKEROPT --rm --stop-signal=SIGTERM --stop-timeout=$DOCKERTIMEOUT" # useless ???
    DOCKEROPT="$DOCKEROPT -d --rm -w $RUNDIR" # detached, auto-remove
    DOCKERID=$(docker run $DOCKEROPT $DOCKER sleep $DOCKERTIMEOUT)
    echo "Run Docker $DOCKER."
    # copy all rundir inside docker...
    docker cp $RUNDIR/. $DOCKERID:$RUNDIR &> /dev/null
    # TODO: copy only desired files... vpl_*.sh, env.sh, ... ???
    # FIXME: use docker as USER not root!
    [ $ONLINE -eq 1 ] && docker cp $HOME/. $DOCKERID:/root &> /dev/null # assuming $HOME is /root
    if [ $GRAPHIC -eq 0 ] ; then
        docker exec -it $DOCKERID $SHELLCMD -c "$CMD $ARGS"
        [ $DEBUG -eq 1 ] && docker exec -it $DOCKERID bash
    else
        # pkill -9 fluxbox    # FIXME: need to kill fluxbox at VPL Jail entrypoint...
        xterm -T main -hold -e docker exec -it $DOCKERID $SHELLCMD -c "$CMD $ARGS"
        [ $DEBUG -eq 1 ] && xterm -T debug -hold -e docker exec -it $DOCKERID bash
    fi
    docker container stop -t 0 $DOCKERID &> /dev/null
    
    ### regular run (no docker) ###
else
    echo "Run..."
    if [ $GRAPHIC -eq 0 ] ; then
        $SHELLCMD $CMD $ARGS
        [ $DEBUG -eq 1 ] && bash
    else
        xterm -hold -e $SHELLCMD $CMD $ARGS
        [ $DEBUG -eq 1 ] && xterm -hold -e bash
    fi
    echo "Terminated."
fi

# EOF
